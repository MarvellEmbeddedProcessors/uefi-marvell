UEFI Porting Guide
==================

This document provides instructions for adding support for new Marvell Armada
board. For the sake of simplicity new Marvell board will be called "new_board".

1. Create configuration files for new target

        a) Create FDF file for new board:

           - Copy and rename <path/to/edk2-platforms>/Platform/Marvell/Armada70x0Db/Armada70x0Db.fdf to
             <path/to/edk2-platforms>/Platform/Marvell/<new_board>/new_board.fdf
           - Change the first no-comment line:
             [FD.Armada_EFI] to [FD.{new_board}_EFI]

        b) Create DSC file for new board:

           - Add new_board.dsc file to <path/to/edk2-platforms>/Platforms/Marvell/Armada directory
           - Insert following [Defines] section to new_board.dsc::

                [Defines]
                  PLATFORM_NAME                  = {new_board}
                  PLATFORM_GUID                  = {newly_generated_GUID}
                  PLATFORM_VERSION               = 0.1
                  DSC_SPECIFICATION              = 0x0001001A
                  OUTPUT_DIRECTORY               = {output_directory}
                  SUPPORTED_ARCHITECTURES        = AARCH64
                  BUILD_TARGETS                  = DEBUG|RELEASE
                  SKUID_IDENTIFIER               = DEFAULT
                  FLASH_DEFINITION               = {path_to_fdf_file}

           - Add "!include Silicon/Marvell/Armada7k8k/Armada7k8k.dsc.inc" entry to new_board.dsc

           - Add required per-board library classes in [LibraryClasses.common]
             section. Please refer to Armada70x0Db example files and declaration::

                [LibraryClasses.common]
                  ArmadaBoardDescLib|Platform/Marvell/Armada70x0Db/Armada70x0DbBoardDescLib/Armada70x0DbBoardDescLib.inf
                  NonDiscoverableInitLib|Platform/Marvell/Armada70x0Db/NonDiscoverableInitLib/NonDiscoverableInitLib.inf

           - Add unique Board ID to MVBOARD_ID list in
             <path/to/edk2-platforms>/Silicon/Marvell/Include/Library/MvBoardDescLib.h::

                typedef enum {
                  MVBOARD_ID_ARMADA7040_DB,
                  MVBOARD_ID_ARMADA8040_MCBIN,
                  MVBOARD_ID_ARMADA8040_DB,
                  MVBOARD_ID_ARMADA8082_DB,
                  MVBOARD_ID_MAX,
                  MVBOARD_ID_DEFAULT = 0xFF,
                } MVBOARD_ID;

             and assign according value to gMarvellTokenSpaceGuid.PcdBoardId PCD.

2. Driver support

   According to content of files from <path/to/edk2-platforms>/Silicon/Marvell/Documentation/PortingGuide.txt
   insert PCD entries into new_board.dsc for every used interface (as listed below).

3. Compilation

   Refer to <path/to/edk2-platforms>/Silicon/Marvell/Documentation/Build.txt. Remember to change
   {platform} to {new_board} in order to point build system to newly created DSC file.

4. Output file

   Output files (and among others FD file, which may be used by ATF as BL33 image) are
   generated under directory pointed by "OUTPUT_DIRECTORY" entry (see point 1.a).

5. Embedded DTB support (optional)

   Add DTB blob for a new board in <path/to/edk2-platforms>/Platform/Marvell/{new_board}/,
   preferably with its decompiled sources.

   - Add the file to a DTB FV entry in the .fdf file. Example entry with new-board.dtb::

        INF EmbeddedPkg/Drivers/DtPlatformDxe/DtPlatformDxe.inf
        FILE FREEFORM = 25462CDA-221F-47DF-AC1D-259CFAA4E326 {
          SECTION RAW = Platform/Marvell/{new_board}/new-board.dtb
        }

5. ACPI support (optional)

   Two default set of tables can be enabled currently for Armada70x0Db/Armada80x0Db/Armada80x0McBin:

     <path/to/edk2-platforms>/Silicon/Marvell/Armada/AcpiTables/

   - In order to add custom tables, similar folder has to be added.
   - Enable compilation of the tables in .fdf file. See example section in Armada.fdf::

        !if $(ARCH) == AARCH64
          # ACPI support
          INF MdeModulePkg/Universal/Acpi/AcpiPlatformDxe/AcpiPlatformDxe.inf
          INF MdeModulePkg/Universal/Acpi/AcpiTableDxe/AcpiTableDxe.inf
          INF RuleOverride = ACPITABLE Silicon/Marvell/Armada7k8k/AcpiTables/Armada70x0Db/AcpiTables.inf
        !endif

   - Add .inf file of the ACPI tables in [Components.AARCH64] section in board's .dsc file::

        [Components.AARCH64]
          Silicon/Marvell/Armada7k8k/AcpiTables/Armada70x0Db/AcpiTables.inf

COMPHY configuration
--------------------
In order to configure ComPhy library, following PCDs are available:

  - gMarvellTokenSpaceGuid.PcdComPhyDevices

This array indicates, which ones of the ComPhy chips defined in
MVHW_COMPHY_DESC template will be configured.

Every ComPhy PCD has <Num> part where <Num> stands for chip ID (order is not
important, but configuration will be set for first PcdComPhyChipCount chips).

Every chip has 3 ComPhy PCDs and three of them comprise per-board lanes
settings for this chip. Their format is array of up to 10 values reflecting
defined numbers for SPEED/TYPE/INVERT, whose description can be found in:
<path/to/edk2-platforms>/Silicon/Marvell/Library/ComPhyLib/ComPhyLib.h

  - gMarvellTokenSpaceGuid.PcdChip0ComPhyTypes
       Array of types - currently supported are::

                CP_UNCONNECTED     = 0x0
                CP_PCIE0           = 0x1
                CP_PCIE1           = 0x2
                CP_PCIE2           = 0x3
                CP_PCIE3           = 0x4
                CP_SATA0           = 0x5
                CP_SATA1           = 0x6
                CP_SATA2           = 0x7
                CP_SATA3           = 0x8
                CP_SGMII0          = 0x9
                CP_SGMII1          = 0xA
                CP_SGMII2          = 0xB
                CP_SGMII3          = 0xC
                CP_QSGMII          = 0xD
                CP_USB3_HOST0      = 0xE
                CP_USB3_HOST1      = 0xF
                CP_USB3_DEVICE     = 0x10
                CP_XAUI0           = 0x11
                CP_XAUI1           = 0x12
                CP_XAUI2           = 0x13
                CP_XAUI3           = 0x14
                CP_RXAUI0          = 0x15
                CP_RXAUI1          = 0x16
                CP_SFI             = 0x17

  - gMarvellTokenSpaceGuid.PcdChip0ComPhySpeeds
       Array of speeds - currently supported are::

                CP_1_25G           = 0x0
                CP_2_5G            = 0x1
                CP_3_125G          = 0x2
                CP_5G              = 0x3
                CP_5_15625G        = 0x4
                CP_6G              = 0x5
                CP_10_3125G        = 0x6
                CP_DEFAULT         = 0x3f

Example::

   #ComPhy
   gMarvellTokenSpaceGuid.PcdComPhyDevices|{ 0x1, 0x1 }
   # ComPhy0
   # 0: PCIE0         5 Gbps
   # 1: PCIE0         5 Gbps
   # 2: PCIE0         5 Gbps
   # 3: PCIE0         5 Gbps
   # 4: SFI           10.31 Gbps
   # 5: SATA1         5 Gbps
   gMarvellTokenSpaceGuid.PcdChip0ComPhyTypes|{ $(CP_PCIE0), $(CP_PCIE0), $(CP_PCIE0), $(CP_PCIE0), $(CP_SFI), $(CP_SATA1)}
   gMarvellTokenSpaceGuid.PcdChip0ComPhySpeeds|{ $(CP_5G), $(CP_5G), $(CP_5G), $(CP_5G), $(CP_10_3125G), $(CP_5G) }
   # ComPhy1
   # 0: SGMII1        1.25 Gbps
   # 1: SATA0         5 Gbps
   # 2: USB3_HOST0    5 Gbps
   # 3: SATA1         5 Gbps
   # 4: SFI           10.31 Gbps
   # 5: SGMII2        3.125 Gbps
   gMarvellTokenSpaceGuid.PcdChip1ComPhyTypes|{ $(CP_SGMII1), $(CP_SATA2), $(CP_USB3_HOST0), $(CP_SATA3), $(CP_SFI), $(CP_SGMII2) }
   gMarvellTokenSpaceGuid.PcdChip1ComPhySpeeds|{ $(CP_1_25G), $(CP_5G), $(CP_5G), $(CP_5G), $(CP_10_3125G), $(CP_3_125G) }

PHY Driver configuration
------------------------
MvPhyDxe provides basic initialization and status routines for Marvell PHYs.
Currently 88E1510 and 88E1112 series PHYs are supported. Following PCDs are required:

  - gMarvellTokenSpaceGuid.PcdPhyStartupAutoneg
        (Boolean - if true, driver waits for autonegotiation on startup)
  - gMarvellTokenSpaceGuid.PcdPhyDeviceIds
        (List of values corresponding to MV_PHY_DEVICE_ID enum)::

           typedef enum {
             MV_PHY_DEVICE_1512 = 0x0,
             MV_PHY_DEVICE_1112 = 0x1
           } MV_PHY_DEVICE_ID;

  - gMarvellTokenSpaceGuid.PcdPhySmiAddresses
        (Addresses of PHY devices)
  - gMarvellTokenSpaceGuid.PcdPhy2MdioController
        (Array specifying, which Mdio controller the PHY is attached to)

Example:

  Assuming, that PHY models are 1512 and 1112 for two consecutive ports at
  addresses 0xA and 0xB, both on the second MDIO bus::

     gMarvellTokenSpaceGuid.PcdPhyDeviceIds|{ 0x0, 0x1 }
     gMarvellTokenSpaceGuid.PcdPhySmiAddresses|{ 0xA, 0xB }
     gMarvellTokenSpaceGuid.PcdPhy2MdioController|{ 0x1, 0x1 }


MDIO configuration
------------------
MDIO driver provides access to network PHYs' registers via EFI_MDIO_READ and
EFI_MDIO_WRITE functions (EFI_MDIO_PROTOCOL). Following PCD is required:

  - gMarvellTokenSpaceGuid.PcdMdioControllers
        (Array with used controllers. Set to 0x1 for enabled, 0x0 for disabled)


I2C configuration
-----------------
In order to enable driver on a new platform, following steps need to be taken:

 - add PCDs with relevant values to .dsc file:

        - gMarvellTokenSpaceGuid.PcdI2cSlaveAddresses|{ 0x50, 0x57 }
                (Addresses of I2C slave devices on bus)
        - gMarvellTokenSpaceGuid.PcdI2cSlaveBuses|{ 0x0, 0x0 }
                (Busses to which accoring slaves are attached. Note, that
                an index only of enabled busses is taken into account)
        - gMarvellTokenSpaceGuid.PcdI2cBusCount|2
                (Number of SoC's I2C buses)
        - gMarvellTokenSpaceGuid.PcdI2cControllers|{ 0x1, 0x1 }
                (Array with used controllers)
        - gMarvellTokenSpaceGuid.PcdI2cClockFrequency|200000000
                (I2C host controller clock frequency)
        - gMarvellTokenSpaceGuid.PcdI2cBaudRate|100000
                (Baud rate used in I2C transmission)


NonDiscoverable devices configuration
-------------------------------------
Installation of various NonDiscoverable devices via dedicated driver is performed
using set of PCDs. Following are available:

  - gMarvellTokenSpaceGuid.PcdPciEXhci
        (Indicates, which Xhci controllers are used)

  - gMarvellTokenSpaceGuid.PcdPciEAhci
        (Indicates, which Ahci controllers are used)

  - gMarvellTokenSpaceGuid.PcdPciESdhci
        (Indicates, which Sdhci controllers are used)

All above PCD's correspond to hardware description in a provided to the driver
using a SoC description library
(<path/to/edk2-platforms>/Silicon/Marvell/Armada7k8k/Library/Armada7k8kSoCDescLib/Armada7k8kSoCDescLib.c).
It comprises device count, base addresses, register region size and DMA-coherency type.

Example:

  Armada80x0McBin NonDiscoverable devices are enabled as follows::

     gMarvellTokenSpaceGuid.PcdPciEXhci|{ 0x1, 0x1, 0x1 }
     gMarvellTokenSpaceGuid.PcdPciEAhci|{ 0x1, 0x1 }
     gMarvellTokenSpaceGuid.PcdPciESdhci|{ 0x1, 0x1 }


Pp2Dxe configuration
--------------------
Pp2Dxe is driver supporting PP2 NIC on Marvell platforms. Following PCDs
are required to operate:

  - gMarvellTokenSpaceGuid.PcdPp2Controllers
        (Array with used controllers. Set to 0x1 for enabled, 0x0 for disabled)

  - gMarvellTokenSpaceGuid.PcdPp2Port2Controller
        (Array specifying, to which controller the port belongs to)

  - gMarvellTokenSpaceGuid.PcdPp2PhyConnectionTypes
        (List of values corresponding to PHY_CONNECTION enum, which is defined as follows)::

           PHY_RGMII          = 0x0
           PHY_RGMII_ID       = 0x1
           PHY_RGMII_TXID     = 0x2
           PHY_RGMII_RXID     = 0x3
           PHY_SGMII          = 0x4
           PHY_RTBI           = 0x5
           PHY_XAUI           = 0x6
           PHY_RXAUI          = 0x7
           PHY_SFI            = 0x8

  - gMarvellTokenSpaceGuid.PcdPp2PhyIndexes
        (Array specifying, to which PHY from gMarvellTokenSpaceGuid.PcdPhyDeviceIds is used.
        If none, e.g. in 10G SFI in-band link detection, 0xFF value must be specified)

  - gMarvellTokenSpaceGuid.PcdPp2PortIds
        (Identificators of PP2 ports)

  - gMarvellTokenSpaceGuid.PcdPp2GopIndexes
        (Indexes used in GOP operation)

  - gMarvellTokenSpaceGuid.PcdPp2InterfaceAlwaysUp
        (Set to 0x1 for always-up interface, 0x0 otherwise)

  - gMarvellTokenSpaceGuid.PcdPp2InterfaceSpeed
        (Values corresponding to PHY_SPEED enum. PHY_SPEED is defined as follows)::

           PHY_SPEED_10       = 0x1
           PHY_SPEED_100      = 0x2
           PHY_SPEED_1000     = 0x3
           PHY_SPEED_2500     = 0x4
           PHY_SPEED_10000    = 0x5

Example:

  Armada80x0McBin network ports are enabled as follows::

     gMarvellTokenSpaceGuid.PcdPp2GopIndexes|{ 0x0, 0x0, 0x2, 0x3 }
     gMarvellTokenSpaceGuid.PcdPp2InterfaceAlwaysUp|{ 0x0, 0x0, 0x0, 0x0 }
     gMarvellTokenSpaceGuid.PcdPp2InterfaceSpeed|{ $(PHY_SPEED_10000), $(PHY_SPEED_10000), $(PHY_SPEED_1000), $(PHY_SPEED_2500) }
     gMarvellTokenSpaceGuid.PcdPp2PhyConnectionTypes|{ $(PHY_SFI), $(PHY_SFI), $(PHY_SGMII), $(PHY_SGMII) }
     gMarvellTokenSpaceGuid.PcdPp2PhyIndexes|{ 0xFF, 0xFF, 0x0, 0xFF }
     gMarvellTokenSpaceGuid.PcdPp2Port2Controller|{ 0x0, 0x1, 0x1, 0x1 }
     gMarvellTokenSpaceGuid.PcdPp2PortIds|{ 0x0, 0x0, 0x1, 0x2 }
     gMarvellTokenSpaceGuid.PcdPp2Controllers|{ 0x1, 0x1 }


UTMI PHY configuration
----------------------
In order to configure UTMI, following PCDs are available:

  - gMarvellTokenSpaceGuid.PcdUtmiControllers
        (Array with used controllers. Set to 0x1 for enabled, 0x0 for disabled.
        Note, that in order to enable UTMI PHY properly, corresponding entry of
        gMarvellTokenSpaceGuid.PcdPciEXhci must be enabled as well)

  - gMarvellTokenSpaceGuid.PcdUtmiPortType
        (Indicates type of the connected USB port)::

           UTMI_USB_HOST0     = 0x0
           UTMI_USB_HOST1     = 0x1
           UTMI_USB_DEVICE0   = 0x2

Example:

  Armada80x0McBin UTMI PHYs are enabled as follows::

     #UtmiPhy
     gMarvellTokenSpaceGuid.PcdUtmiControllersEnabled|{ 0x1, 0x1, 0x1, 0x0 }
     gMarvellTokenSpaceGuid.PcdUtmiPortType|{ $(UTMI_USB_HOST0), $(UTMI_USB_HOST1), $(UTMI_USB_HOST0), $(UTMI_USB_HOST1) }


SPI driver configuration
------------------------
Following PCDs are available for configuration of spi driver:

  - gMarvellTokenSpaceGuid.PcdSpiClockFrequency
        (Frequency (in Hz) of SPI clock)

  - gMarvellTokenSpaceGuid.PcdSpiMaxFrequency
        (Max SCLK line frequency (in Hz) (max transfer frequency))

  - gMarvellTokenSpaceGuid.PcdSpiClockFixed
        (Boolean indicator if the SPI controller feeding clock must be
        additionally enabled in the host driver. If clock is not fixed,
        two more PCDs require setting in order to enable clock for
        runtime services access to the SPI flash. Default value is TRUE,
        which means below PCDs can be omitted).

  - gMarvellTokenSpaceGuid.PcdSpiClockRegBase
        (Used only if gMarvellTokenSpaceGuid.PcdSpiClockFixed|FALSE.
        Base address of the gate clock configuration register, calculated
        in a following way: CP base address + 0x4402220).

  - gMarvellTokenSpaceGuid.PcdSpiClockMask
        (Used only if gMarvellTokenSpaceGuid.PcdSpiClockFixed|FALSE.
        32bit mask used for SPI clock enabling. For CP110 a proper
        value is 0x220000).

SpiFlash configuration
----------------------
Folowing PCDs for spi flash driver configuration must be set properly:

  - gMarvellTokenSpaceGuid.PcdSpiFlashMode
        (Default SCLK mode - see SPI_MODE enum in file
        <path/to/edk2-platforms>/Silicon/Marvell/Include/Protocol/Spi.h)

  - gMarvellTokenSpaceGuid.PcdSpiFlashCs
        (Chip select used for communication with the Flash)

Example:

  Armada80x0McBin SPI host controller and flash is enabled as follows::

     #SPI
     gMarvellTokenSpaceGuid.PcdSpiClockFixed|FALSE
     gMarvellTokenSpaceGuid.PcdSpiClockMask|0x220000
     gMarvellTokenSpaceGuid.PcdSpiClockRegBase|0xF4440220
     gMarvellTokenSpaceGuid.PcdSpiRegBase|0xF4700680
     gMarvellTokenSpaceGuid.PcdSpiMaxFrequency|10000000
     gMarvellTokenSpaceGuid.PcdSpiClockFrequency|200000000
     gMarvellTokenSpaceGuid.PcdSpiFlashMode|3
     gMarvellTokenSpaceGuid.PcdSpiFlashCs|0


MPP configuration
-----------------
Multi-Purpose Ports (MPP) are configurable through platform PCDs.
In order to set desired pin multiplexing, .dsc file needs to be modified.
Following PCDs are available:

  - gMarvellTokenSpaceGuid.PcdMppChipCount
        (Indicates how many different chips are placed on board. So far up to 4 chips
        are supported)

Every MPP PCD has <Num> part where <Num> stands for chip ID (order is not
important, but configuration will be set for first PcdMppChipCount chips).

Below is example for the first chip (Chip0):

  - gMarvellTokenSpaceGuid.PcdChip0MppBaseAddress
        (This is base address for MPP configuration register)

  - gMarvellTokenSpaceGuid.PcdChip0MppPinCount
        (Defines how many MPP pins are available)

  - gMarvellTokenSpaceGuid.PcdChip0MppSel0
  - gMarvellTokenSpaceGuid.PcdChip0MppSel1
  - gMarvellTokenSpaceGuid.PcdChip0MppSel2
        (Arrays of values specifying functions of each 10 pins in ascending order)


Examples:

  Armada80x0McBin pin multiplexing is enabled as follows::

     # APN806-A0 MPP SET
     gMarvellTokenSpaceGuid.PcdChip0MppReverseFlag|FALSE
     gMarvellTokenSpaceGuid.PcdChip0MppBaseAddress|0xF06F4000
     gMarvellTokenSpaceGuid.PcdChip0MppPinCount|20
     gMarvellTokenSpaceGuid.PcdChip0MppSel0|{ 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1 }
     gMarvellTokenSpaceGuid.PcdChip0MppSel1|{ 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3 }

     # CP110 MPP SET - master
     gMarvellTokenSpaceGuid.PcdChip1MppReverseFlag|FALSE
     gMarvellTokenSpaceGuid.PcdChip1MppBaseAddress|0xF2440000
     gMarvellTokenSpaceGuid.PcdChip1MppPinCount|64
     gMarvellTokenSpaceGuid.PcdChip1MppSel0|{ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }
     gMarvellTokenSpaceGuid.PcdChip1MppSel1|{ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }
     gMarvellTokenSpaceGuid.PcdChip1MppSel2|{ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }
     gMarvellTokenSpaceGuid.PcdChip1MppSel3|{ 0xFF, 0x0, 0x7, 0xA, 0x7, 0x2, 0x2, 0x2, 0x2, 0xA }
     gMarvellTokenSpaceGuid.PcdChip1MppSel4|{ 0x7, 0x7, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }
     gMarvellTokenSpaceGuid.PcdChip1MppSel5|{ 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0xE, 0xE, 0xE, 0xE }
     gMarvellTokenSpaceGuid.PcdChip1MppSel6|{ 0xE, 0xE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }

     # CP110 MPP SET - slave
     gMarvellTokenSpaceGuid.PcdChip2MppReverseFlag|FALSE
     gMarvellTokenSpaceGuid.PcdChip2MppBaseAddress|0xF4440000
     gMarvellTokenSpaceGuid.PcdChip2MppPinCount|64
     gMarvellTokenSpaceGuid.PcdChip2MppSel0|{ 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x8, 0x8, 0x0, 0x0 }
     gMarvellTokenSpaceGuid.PcdChip2MppSel1|{ 0x0, 0x0, 0x3, 0x3, 0x3, 0x3, 0x3, 0xFF, 0xFF, 0xFF }
     gMarvellTokenSpaceGuid.PcdChip2MppSel2|{ 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0xFF, 0x0, 0x0, 0x0, 0x0 }
     gMarvellTokenSpaceGuid.PcdChip2MppSel3|{ 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }
     gMarvellTokenSpaceGuid.PcdChip2MppSel4|{ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }
     gMarvellTokenSpaceGuid.PcdChip2MppSel5|{ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }
     gMarvellTokenSpaceGuid.PcdChip2MppSel6|{ 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }


Ramdisk configuration
---------------------
There is one PCD available for RamDisk configuration.

  - gMarvellTokenSpaceGuid.PcdRamDiskSize
        (Defines size of RamDisk, 64MB by default)


RTC configuration
-----------------
In order to use RTC, its base address must be passed in below PCD

  - gMarvellTokenSpaceGuid.PcdRtcBaseAddress
        (For CP110 its value is caluculated followingly:
        CP base address + 0x284000)

Fuse configuration
------------------
In order to use the fuse functionality, following steps must be undertaken:

  - Assign PCD in board's .dsc file::

      gMarvellTokenSpaceGuid.PcdFuseOperationEnabled|{ 0x1 }

  - Enable Shell command compilation in .dsc.inc file as below::

      # UEFI application (Shell Embedded Boot Loader)
      ShellPkg/Application/Shell/Shell.inf {
        <LibraryClasses>
          ShellCommandLib|ShellPkg/Library/UefiShellCommandLib/UefiShellCommandLib.inf
          NULL|ShellPkg/Library/UefiShellLevel2CommandsLib/UefiShellLevel2CommandsLib.inf
          NULL|ShellPkg/Library/UefiShellLevel1CommandsLib/UefiShellLevel1CommandsLib.inf
          NULL|ShellPkg/Library/UefiShellLevel3CommandsLib/UefiShellLevel3CommandsLib.inf
          NULL|ShellPkg/Library/UefiShellDriver1CommandsLib/UefiShellDriver1CommandsLib.inf
          NULL|ShellPkg/Library/UefiShellDebug1CommandsLib/UefiShellDebug1CommandsLib.inf
          NULL|ShellPkg/Library/UefiShellInstall1CommandsLib/UefiShellInstall1CommandsLib.inf
          NULL|ShellPkg/Library/UefiShellNetwork1CommandsLib/UefiShellNetwork1CommandsLib.inf
          NULL|Silicon/Marvell/Applications/EepromCmd/EepromCmd.inf
          NULL|Silicon/Marvell/Applications/SpiTool/SpiFlashCmd.inf
          NULL|Silicon/Marvell/Applications/FirmwareUpdate/FUpdate.inf
          NULL|Silicon/Marvell/Applications/MdioCmd/MdioCmd.inf
          NULL|Silicon/Marvell/Applications/FuseCmd/FuseCmd.inf

.. seealso::
  For usage, please check 'A8K platforms' sections in
  'Boot Loaders'/'U-Boot User Guide'/'Trusted Boot (Secure Mode)' of this
  documentation.
